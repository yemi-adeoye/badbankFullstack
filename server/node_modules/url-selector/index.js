const isNil = require('lodash/isNil');

const generateTopic = (topicPrefix, req) => {
    return [topicPrefix, req.method, req.originalUrl].join('_');
};

const matchOne = (pattern, request, topicPrefix = '', _generateTopic = true) => {

    let url;
    if (_generateTopic) {
        url = generateTopic(topicPrefix, request);
    } else {
        url = request.originalUrl;
    }

    let lastUrl = [];
    let patternParts = pattern.split('/');
    let urlParts = [];

    if (url.indexOf('?') > -1) {
        url = url.split('?')[0];
    }

    urlParts = url.split('/');

    patternParts.forEach((patternItem, index) => {

        if (patternItem[0] === ':') {
            lastUrl.push(urlParts[index]);
        } else {
            lastUrl.push(patternItem);
        }

    });

    return lastUrl.join('/') === url;
};

/**
* This is a description
* @param {Array} whitelist - matched url pattern array
* @param {Object} request - express request object
* @param {String} topicPrefix - url prefix string
* @param {bool} generateTopic -super bir parametre, mustafa duzeltecek bu yazilari
*/

module.exports.isMatch = (whitelist, request, topicPrefix = '', _generateTopic = true) =>
    !isNil(module.exports.getTopic(whitelist, request, topicPrefix, _generateTopic));

module.exports.getTopic = (whitelist, request, topicPrefix = '', _generateTopic = true) => {

    if (!Array.isArray(whitelist))
        throw new Error('url-selector validate: Invalid parameters: whitelist is not array');

    return whitelist.find((item) => matchOne(item, request, topicPrefix, _generateTopic));
};