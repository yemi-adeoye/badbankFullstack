/*jshint esversion: 6 */
const winston = require('winston');
const winstonGraylog = require('winston-graylog2');
const defaults = require('lodash/defaults');


winston.emitErrs = true;
module.exports = function (config) {
	let transports = [];

	if (config.graylog) {
		if (!config.graylog.name || !config.graylog.host || !config.graylog.port || !config.graylog.productName || !config.graylog.application || !config.graylog.env)
			throw new Error('Developer Error: invalid winston graylog parameters');

		let graylogOptions = {
			name: config.graylog.name,
			level: config.graylog.level || 'debug',
			silent: false,
			handleExceptions: true,
			prelog: function (msg) {
				return msg.trim();
			},
			graylog: {
				servers: [{ host: config.graylog.host, port: config.graylog.port }],
				hostname: config.graylog.productName,
				facility: config.graylog.application,
				bufferSize: 1400
			},
			staticMeta: { env: config.graylog.env }
		};

		transports.push(new (winstonGraylog)(graylogOptions));
	}

	if (config.console) {
		let consoleOptions = defaults(config.console, {
			level: config.console.level || 'debug',
			handleExceptions: true,
			json: false,
			colorize: true
		});

		transports.push(new winston.transports.Console(consoleOptions));
	}

	if (config.file) {
		transports.push(new winston.transports.File(defaults(config.file, {
			level: 'debug',
			handleExceptions: true,
			json: false,
			colorize: true,
			maxsize: 50000000000
		})));
	}
	let logger = new winston.Logger({
		transports: transports,
		exitOnError: false
	});

	return {
		logger: logger,
		stream: (opt) => ({
			write: (log, encoding) => {
				opt = opt || {};
				logger.info(`methodName:${opt.methodName} requestId:${opt.id} `.concat(log));
			}
		})
	};
};